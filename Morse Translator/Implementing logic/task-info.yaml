type: edu
files:
  - name: src/main/java/org/hyperskill/morsetranslator/MainActivity.kt
    visible: true
    text: |-
      package org.hyperskill.morsetranslator
      
      import android.os.Bundle
      import androidx.appcompat.app.AppCompatActivity
      
      class MainActivity : AppCompatActivity() {
          override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)
      
              /*
                  Tests for android can not guarantee the correctness of solutions that make use of
                  mutation on "static" variables. You should avoid using those.
                  Consider "static" as being anything on kotlin that is transpiled to java
                  into a static variable. That includes global variables and variables inside
                  singletons declared with keyword object, including companion object.
                  This limitation is related to the use of JUnit on tests. JUnit re-instantiate all
                  instance variable for each test method, but it does not re-instantiate static variables.
                  The use of static variable to hold state can lead to state from one test to spill over
                  to another test and cause unexpected results.
                  Using mutation on static variables is considered a bad practice anyway and no measure
                  attempting to give support to that pattern will be made.
               */
          }
      }
    learner_created: false
  - name: src/main/res/drawable/ic_launcher_background.xml
    visible: true
    text: |
      <?xml version="1.0" encoding="utf-8"?>
      <vector xmlns:android="http://schemas.android.com/apk/res/android"
          android:width="108dp"
          android:height="108dp"
          android:viewportWidth="108"
          android:viewportHeight="108">
          <path
              android:fillColor="#008577"
              android:pathData="M0,0h108v108h-108z" />
          <path
              android:fillColor="#00000000"
              android:pathData="M9,0L9,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,0L19,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M29,0L29,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M39,0L39,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M49,0L49,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M59,0L59,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M69,0L69,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M79,0L79,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M89,0L89,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M99,0L99,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,9L108,9"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,19L108,19"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,29L108,29"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,39L108,39"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,49L108,49"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,59L108,59"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,69L108,69"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,79L108,79"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,89L108,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,99L108,99"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,29L89,29"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,39L89,39"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,49L89,49"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,59L89,59"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,69L89,69"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,79L89,79"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M29,19L29,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M39,19L39,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M49,19L49,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M59,19L59,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M69,19L69,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M79,19L79,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
      </vector>
    learner_created: false
  - name: src/main/res/drawable-v24/ic_launcher_foreground.xml
    visible: true
    text: |
      <vector xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:aapt="http://schemas.android.com/aapt"
          android:width="108dp"
          android:height="108dp"
          android:viewportWidth="108"
          android:viewportHeight="108">
          <path
              android:fillType="evenOdd"
              android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
              android:strokeWidth="1"
              android:strokeColor="#00000000">
              <aapt:attr name="android:fillColor">
                  <gradient
                      android:endX="78.5885"
                      android:endY="90.9159"
                      android:startX="48.7653"
                      android:startY="61.0927"
                      android:type="linear">
                      <item
                          android:color="#44000000"
                          android:offset="0.0" />
                      <item
                          android:color="#00000000"
                          android:offset="1.0" />
                  </gradient>
              </aapt:attr>
          </path>
          <path
              android:fillColor="#FFFFFF"
              android:fillType="nonZero"
              android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
              android:strokeWidth="1"
              android:strokeColor="#00000000" />
      </vector>
    learner_created: false
  - name: src/main/res/layout/activity_main.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:app="http://schemas.android.com/apk/res-auto"
          xmlns:tools="http://schemas.android.com/tools"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          tools:context=".MainActivity">
      
          <TextView
              android:id="@+id/helloTv"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:layout_margin="8dp"
              android:gravity="center"
              android:text="hello new project"
              app:layout_constraintBottom_toTopOf="@+id/inputEt"
              app:layout_constraintEnd_toEndOf="parent"
              app:layout_constraintStart_toStartOf="parent"
              app:layout_constraintTop_toTopOf="parent"
              app:layout_constraintVertical_chainStyle="packed"
              />
      
          <EditText
              android:id="@+id/inputEt"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:layout_margin="8dp"
              android:gravity="center"
              android:hint="change text"
              android:inputType="text"
              app:layout_constraintBottom_toTopOf="@+id/submitBtn"
              app:layout_constraintEnd_toEndOf="parent"
              app:layout_constraintStart_toStartOf="parent"
              app:layout_constraintTop_toBottomOf="@+id/helloTv" />
      
          <Button
              android:id="@+id/submitBtn"
              android:layout_width="wrap_content"
              android:layout_height="wrap_content"
              android:text="submit"
              app:layout_constraintBottom_toBottomOf="parent"
              app:layout_constraintEnd_toEndOf="parent"
              app:layout_constraintStart_toStartOf="parent"
              app:layout_constraintTop_toBottomOf="@+id/inputEt" />
      
      </androidx.constraintlayout.widget.ConstraintLayout>
    learner_created: false
  - name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
          <background android:drawable="@drawable/ic_launcher_background" />
          <foreground android:drawable="@drawable/ic_launcher_foreground" />
      </adaptive-icon>
    learner_created: false
  - name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
          <background android:drawable="@drawable/ic_launcher_background" />
          <foreground android:drawable="@drawable/ic_launcher_foreground" />
      </adaptive-icon>
    learner_created: false
  - name: src/main/res/values/colors.xml
    visible: true
    text: |
      <?xml version="1.0" encoding="utf-8"?>
      <resources>
          <color name="colorPrimary">#008577</color>
          <color name="colorPrimaryDark">#00574B</color>
          <color name="colorAccent">#D81B60</color>
      </resources>
    learner_created: false
  - name: src/main/res/values/strings.xml
    visible: true
    text: |
      <resources>
          <string name="app_name">Morse Translator</string>
      </resources>
    learner_created: false
  - name: src/main/res/values/styles.xml
    visible: true
    text: |
      <resources>
      
          <!-- Base application theme. -->
          <style name="AppTheme" parent="Theme.MaterialComponents.Light.DarkActionBar">
              <!-- Customize your theme here. -->
              <item name="colorPrimary">@color/colorPrimary</item>
              <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
              <item name="colorAccent">@color/colorAccent</item>
          </style>
      
      </resources>
    learner_created: false
  - name: src/main/AndroidManifest.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="org.hyperskill.morsetranslator">
      
        <application
            android:allowBackup="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/app_name"
            android:roundIcon="@mipmap/ic_launcher_round"
            android:supportsRtl="true"
            android:theme="@style/AppTheme">
          <activity android:name="org.hyperskill.morsetranslator.MainActivity">
            <intent-filter>
              <action android:name="android.intent.action.MAIN" />
      
              <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
          </activity>
        </application>
      
      </manifest>
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      apply plugin: 'com.android.application'
      apply plugin: 'kotlin-android'
      
      android {
          compileSdkVersion hs.android.compileSdkVersion
      
          defaultConfig {
      
              applicationId "org.hyperskill.morsetranslator"
              minSdkVersion hs.android.minSdkVersion
              targetSdkVersion hs.android.targetSdkVersion
              versionCode 1
              versionName '1.0'
          }
      
          buildFeatures {
              viewBinding true
          }
      }
      
      dependencies {
          def kotlinVersion = hs.android.kotlinVersion
          implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
      
          def coreKtx = hs.android.lib.coreKtx
          implementation "androidx.core:core-ktx:$coreKtx"
      
          def appCompat = hs.android.lib.appCompat
          implementation "androidx.appcompat:appcompat:$appCompat"
      
          def constraintLayout = hs.android.lib.constraintLayout
          implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
      
          def material = hs.android.lib.material
          implementation "com.google.android.material:material:$material"
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/morsetranslator/internals/shadows/CustomShadowAsyncDifferConfig.java
    visible: false
    text: |
      package org.hyperskill.morsetranslator.internals.shadows;
      
      import android.os.Handler;
      import android.os.Looper;
      
      import androidx.recyclerview.widget.AsyncDifferConfig;
      
      import org.robolectric.annotation.Implementation;
      import org.robolectric.annotation.Implements;
      
      import java.util.concurrent.Executor;
      
      @Implements(AsyncDifferConfig.class)
      @SuppressWarnings({"unused"})
      public class CustomShadowAsyncDifferConfig {
      
          public static class MainThreadExecutor implements Executor {
              private final Handler handler = new Handler(Looper.getMainLooper());
      
              @Override
              public void execute(Runnable r) {
                  handler.post(r);
              }
          }
          Executor mainExecutor;
      
          @Implementation
          public Executor getBackgroundThreadExecutor() {
              if(mainExecutor == null) {
                  mainExecutor = new MainThreadExecutor();
              }
              return mainExecutor;
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/morsetranslator/internals/AbstractUnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.morsetranslator.internals
      
      import android.app.Activity
      import android.app.AlertDialog
      import android.content.Intent
      import android.os.Bundle
      import android.view.View
      import androidx.recyclerview.widget.RecyclerView
      import org.junit.Assert.assertEquals
      import org.junit.Assert.assertNotNull
      import org.junit.Assert.assertTrue
      import org.robolectric.Robolectric
      import org.robolectric.Shadows.shadowOf
      import org.robolectric.android.controller.ActivityController
      import org.robolectric.shadow.api.Shadow
      import org.robolectric.shadows.ShadowActivity
      import org.robolectric.shadows.ShadowAlertDialog
      import org.robolectric.shadows.ShadowLooper
      import org.robolectric.shadows.ShadowToast
      import java.time.Duration
      
      @Suppress("RedundantUnitReturnType")
      abstract class AbstractUnitTest<T : Activity>(clazz: Class<T>) {
      
          /**
           * Setup and control activities and their lifecycle
           */
          val activityController: ActivityController<T> by lazy {
              Robolectric.buildActivity(clazz)
          }
      
          /**
           * The activity being tested.
           *
           * It is the @RealObject of the shadowActivity
           */
          val activity : Activity by lazy {
              activityController.get()
          }
      
          /**
           * A Roboletric shadow object of the Activity class, contains helper methods to deal with
           * testing activities like setting permissions, peeking results of launched activities for result,
           * retrieving shown dialogs, intents and others.
           *
           * If you don't know what shadows are you can have a better understanding on that reading this
           * on roboletric documentation: http://robolectric.org/extending/
           *
           * Understanding Shadows is fundamental for Roboletric, things are not what they appear to be on
           * Roboletric because running a code on the jvm is not the same as running the code on a real/emulated device.
           * Code that expects to eventually talk to the machine won't have the machine they expect to have to talk to.
           * Shadow is how Roboletric makes things possible, they impersonate @RealObject and act when @RealObject is expected to act.
           *
           * Things in Roboletric are not what they appear to be.
           * It is possible to not notice it for the most part, but it will be essential for some other parts
           */
          val shadowActivity: ShadowActivity by lazy {
              Shadow.extract(activity)
          }
      
          /**
           * A Roboletric shadow object of the mainLooper. Handles enqueued runnables and also the passage of time.
           *
           * Usually used with .idleFor(someDurationValue) or .runToEndOfTasks()
           */
          val shadowLooper: ShadowLooper by lazy {
              shadowOf(activity.mainLooper)
          }
      
          /**
           * Decorate your test code with this method to ensure better error messages displayed
           * when tests are run with check button and exceptions are thrown by user implementation.
           *
           * returns a value for convenience use, like in tests that involve navigation between Activities
           */
          fun <ReturnValue> testActivity(arguments: Intent = Intent(), savedInstanceState: Bundle = Bundle(), testCodeBlock: (Activity) -> ReturnValue): ReturnValue {
              try {
                  activity.intent =  arguments
                  activityController.setup(savedInstanceState)
              } catch (ex: Exception) {
                  throw AssertionError("Exception, test failed on activity creation with $ex\n${ex.stackTraceToString()}")
              }
      
              return try {
                  testCodeBlock(activity)
              } catch (ex: Exception) {
                  throw AssertionError("Exception. Test failed on activity execution with $ex\n${ex.stackTraceToString()}")
              }
          }
      
          /**
           * Use this method to find views.
           *
           * The view existence will be assert before being returned
           */
          inline fun <reified T> Activity.findViewByString(idString: String): T {
              val id = this.resources.getIdentifier(idString, "id", this.packageName)
              val maybeView: View? = this.findViewById(id)
      
              val (expectedClass, maybeActualClass) =
                  if(T::class.java.simpleName == maybeView?.javaClass?.simpleName) {
                      T::class.java.canonicalName to maybeView.javaClass.canonicalName
                  } else {
                      T::class.java.simpleName to maybeView?.javaClass?.simpleName
                  }
              val idNotFoundMessage = "View with id \"$idString\" was not found"
              val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                      "Expected $expectedClass found $maybeActualClass"
      
              assertNotNull(idNotFoundMessage, maybeView)
              assertTrue(wrongClassMessage, maybeView is T)
      
              return maybeView as T
          }
      
          /**
           * Use this method to find views.
           *
           * The view existence will be assert before being returned
           */
          inline fun <reified T> View.findViewByString(idString: String): T {
              val id = this.resources.getIdentifier(idString, "id", context.packageName)
              val maybeView: View? = this.findViewById(id)
      
              val (expectedClass, maybeActualClass) =
                  if(T::class.java.simpleName == maybeView?.javaClass?.simpleName) {
                      T::class.java.canonicalName to maybeView.javaClass.canonicalName
                  } else {
                      T::class.java.simpleName to maybeView?.javaClass?.simpleName
                  }
              val idNotFoundMessage = "View with id \"$idString\" was not found"
              val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                      "Expected $expectedClass found $maybeActualClass"
      
              assertNotNull(idNotFoundMessage, maybeView)
              assertTrue(wrongClassMessage, maybeView is T)
      
              return maybeView as T
          }
      
          /**
           * Use this method to perform clicks. It will also advance the clock millis milliseconds and run
           * enqueued Runnable scheduled to run on main looper in that timeframe.
           * Default value for millis is 500
           *
           * Internally it calls performClick() and shadowLooper.idleFor(millis)
           */
          fun View.clickAndRun(millis: Long = 500) {
              this.performClick()
              shadowLooper.idleFor(Duration.ofMillis(millis))
          }
      
          /**
           * Asserts that the last message toasted is the expectedMessage.
           * Assertion fails if no toast is shown with null actualLastMessage value.
           */
          fun assertLastToastMessageEquals(errorMessage: String, expectedMessage: String,) {
              val actualLastMessage: String? = ShadowToast.getTextOfLatestToast()
              assertEquals(errorMessage, expectedMessage, actualLastMessage)
          }
      
          /**
           * Use this method to retrieve the latest AlertDialog.
           *
           * The existence of such AlertDialog will be asserted before returning.
           *
           * Robolectric only supports android.app.AlertDialog, test will not be
           * able to find androidx.appcompat.app.AlertDialog.
           *
           * - Important!!! :
           * When writing stage description state explicitly the correct version that should be imported
           */
          fun getLatestDialog(): AlertDialog {
              val latestAlertDialog = ShadowAlertDialog.getLatestAlertDialog()
      
              assertNotNull(
                  "There was no AlertDialog found. Make sure to import android.app.AlertDialog version",
                  latestAlertDialog
              )
      
              return latestAlertDialog!!
          }
      
          /**
           *  Use this to make some action on the each item of the RecyclerView.
           *
           *  Asserts that the size matches the size of fakeResultList
           *
           *  Calls action with the itemViewSupplier so that it is possible to retrieve that itemView.
           *
           *  Take attention to refresh references to views coming from itemView since RecyclerView
           *  can change the instance of View for a determinate list item after an update to the list.
           */
          fun <T> RecyclerView.doActionOnEachListItem(
              fakeResultList: List<T>,
              caseDescription: String = "",
              action: (itemViewSupplier: () -> View, position: Int, item: T) -> Unit
          ) : Unit {
      
              assertNotNull("$caseDescription Your recycler view adapter should not be null", this.adapter)
      
              val expectedSize = fakeResultList.size
      
              val actualSize = this.adapter!!.itemCount
              assertEquals("$caseDescription Incorrect number of list items", expectedSize, actualSize)
      
              if(expectedSize == 0) {
                  return
              } else if(expectedSize > 0) {
      
                  val maxItemWidth = (0 until expectedSize)
                      .asSequence()
                      .mapNotNull { this.findViewHolderForAdapterPosition(it)?.itemView?.width }
                      .maxOrNull()
                      ?: throw AssertionError("$caseDescription No item is being displayed on RecyclerView, is it big enough to display one item?")
                  val listWidth = maxItemWidth * (expectedSize + 1)
      
                  val maxItemHeight = (0 until actualSize)
                      .asSequence()
                      .mapNotNull { this.findViewHolderForAdapterPosition(it)?.itemView?.height }
                      .maxOrNull()
                      ?: throw AssertionError("$caseDescription No item is being displayed on RecyclerView, is it big enough to display one item?")
                  val listHeight = maxItemHeight * (actualSize + 1)
      
                  for((i, song) in fakeResultList.withIndex()) {
      
                      val itemViewSupplier = {
                          this.layout(0,0, listHeight, listWidth)  // may increase clock time
                          scrollToPosition(i)
                          findViewHolderForAdapterPosition(i)?.itemView
                              ?: throw AssertionError("$caseDescription Could not find list item with index $i")
                      }
                      action(itemViewSupplier, i, song)
                  }
      
              } else {
                  throw IllegalStateException("size assertion was not effective")
              }
          }
      
          /**
           *  Use this to make some action on one item of the RecyclerView.
           *
           *  Asserts that the the size of the list is at least itemIndex + 1.
           *
           *  Calls action with the itemViewSupplier so that it is possible to retrieve that itemView.
           *
           *  Take attention to refresh references to views coming from itemView since RecyclerView
           *  can change the instance of View for a determinate list item after an update to the list.
           */
          fun RecyclerView.doActionOnSingleListItem(
              itemIndex: Int,
              caseDescription: String = "",
              action: (itemViewSupplier: () -> View) -> Unit
          ) : Unit {
      
              assertNotNull("$caseDescription Your recycler view adapter should not be null", this.adapter)
      
              val expectedMinSize = itemIndex + 1
      
              val actualSize = this.adapter!!.itemCount
              assertTrue(
                  "$caseDescription RecyclerView was expected to contain item with index $itemIndex, but its size was $actualSize",
                  actualSize >= expectedMinSize
              )
      
              if (actualSize >= expectedMinSize) {
                  val maxItemWidth = (0 until actualSize)
                      .asSequence()
                      .mapNotNull { this.findViewHolderForAdapterPosition(it)?.itemView?.width }
                      .maxOrNull()
                      ?: throw AssertionError("$caseDescription No item is being displayed on RecyclerView, is it big enough to display one item?")
                  val listWidth = maxItemWidth * (actualSize + 1)
      
                  val maxItemHeight = (0 until actualSize)
                      .asSequence()
                      .mapNotNull { this.findViewHolderForAdapterPosition(it)?.itemView?.height }
                      .maxOrNull()
                      ?: throw AssertionError("$caseDescription No item is being displayed on RecyclerView, is it big enough to display one item?")
                  val listHeight = maxItemHeight * (actualSize + 1)
      
                  val itemViewSupplier = {
                      this.layout(0, 0, listWidth, listHeight)  // may increase clock time
                      this.scrollToPosition(itemIndex)
                      val itemView = (this.findViewHolderForAdapterPosition(itemIndex)?.itemView
                          ?: throw AssertionError("$caseDescription Could not find list item with index $itemIndex"))
                      itemView
                  }
      
                  action(itemViewSupplier)
      
              } else {
                  throw IllegalStateException("size assertion was not effective")
              }
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/morsetranslator/internals/MorseAlphabetActivityUnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.morsetranslator.internals
      
      import android.app.Activity
      import android.view.View
      import android.widget.TextView
      import androidx.recyclerview.widget.RecyclerView
      
      
      
      open class MorseAlphabetActivityUnitTest<T : Activity>(clazz: Class<T>): AbstractUnitTest<T>(clazz) {
      
          companion object {
              const val ID_TV_DESCRIPTION = "tv_description"
              const val ID_RV_ALPHABET = "rv_alphabet"
              const val ID_TV_LETTER = "tv_letter"
              const val ID_TV_MORSE = "tv_morse"
          }
          val tvDesc by lazy {
              activity.findViewByString<TextView>(ID_TV_DESCRIPTION)
          }
          val recyclerView by lazy {
              activity.findViewByString<RecyclerView>(ID_RV_ALPHABET)
          }
      
          inner class ItemViewBinding(root: View) {
              val tvLetter = root.findViewByString<TextView>(ID_TV_LETTER)
              val tvMorse = root.findViewByString<TextView>(ID_TV_MORSE)
          }
      
          val morseCodeMap = mapOf(
              'A' to ".-",
              'B' to "-...",
              'C' to "-.-.",
              'D' to "-..",
              'E' to ".",
              'F' to "..-.",
              'G' to "--.",
              'H' to "....",
              'I' to "..",
              'J' to ".---",
              'K' to "-.-",
              'L' to ".-..",
              'M' to "--",
              'N' to "-.",
              'O' to "---",
              'P' to ".--.",
              'Q' to "--.-",
              'R' to ".-.",
              'S' to "...",
              'T' to "-",
              'U' to "..-",
              'V' to "...-",
              'W' to ".--",
              'X' to "-..-",
              'Y' to "-.--",
              'Z' to "--..",
              '0' to "-----",
              '1' to ".----",
              '2' to "..---",
              '3' to "...--",
              '4' to "....-",
              '5' to ".....",
              '6' to "-....",
              '7' to "--...",
              '8' to "---..",
              '9' to "----.9"
          )
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/morsetranslator/internals/MorseMainActivityUnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.morsetranslator.internals
      
      import android.app.Activity
      import android.content.Intent
      import android.widget.Button
      import android.widget.EditText
      import android.widget.TextView
      import org.junit.Assert.assertEquals
      
      open class MorseMainActivityUnitTest<T : Activity>(clazz: Class<T>): AbstractUnitTest<T>(clazz) {
      
          companion object {
              const val ID_TV_TEXT = "tv_text"
              const val ID_TV_MORSE = "tv_morse"
              const val ID_ET_TEXT = "et_text"
              const val ID_ET_MORSE = "et_morse"
              const val ID_BT_CLEAR = "bt_clear"
              const val ID_BT_GUIDE = "bt_guide"
          }
      
          val tvText: TextView by lazy {
              val view = activity.findViewByString<TextView>(ID_TV_TEXT)
      
              val messageInitialText = "The $ID_TV_TEXT has a wrong initial text"
              val expectedInitialText = "text"
              val actualInitialText = view.text.toString().lowercase()
              assertEquals(messageInitialText, expectedInitialText, actualInitialText)
      
              view
          }
      
          val tvMorse: TextView by lazy {
              val view = activity.findViewByString<TextView>(ID_TV_MORSE)
      
              val messageInitialText = "The $ID_TV_MORSE has a wrong initial text"
              val expectedInitialText = "morse"
              val actualInitialText = view.text.toString().lowercase()
              assertEquals(messageInitialText, expectedInitialText, actualInitialText)
      
              view
          }
      
          val etText: EditText by lazy {
              val view = activity.findViewByString<EditText>(ID_ET_TEXT)
      
              val messageInitialHint = "The $ID_ET_TEXT has a wrong initial hint"
              val expectedInitialHint = "text"
              val actualInitialHint = view.hint.toString().lowercase()
              assertEquals(messageInitialHint, expectedInitialHint, actualInitialHint)
      
              view
          }
      
          val etMorse: EditText by lazy {
              val view = activity.findViewByString<EditText>(ID_ET_MORSE)
      
              val messageInitialHint = "The $ID_ET_MORSE has a wrong initial hint"
              val expectedInitialHint = "morse"
              val actualInitialHint = view.hint.toString().lowercase()
              assertEquals(messageInitialHint, expectedInitialHint, actualInitialHint)
      
              view
          }
      
          val btClear: Button by lazy {
              val view = activity.findViewByString<Button>(ID_BT_CLEAR)
      
              val messageInitialText = "The $ID_BT_CLEAR has the wrong text"
              val expectedInitialText = "clear"
              val actualInitialText = view.text.toString().lowercase()
              assertEquals(messageInitialText, expectedInitialText, actualInitialText)
      
              view
          }
      
          val btGuide: Button by lazy {
              val view = activity.findViewByString<Button>(ID_BT_GUIDE)
      
              val messageInitialText = "The $ID_BT_GUIDE has the wrong text"
              val expectedInitialText = "guide"
              val actualInitialText = view.text.toString().lowercase()
              assertEquals(messageInitialText, expectedInitialText, actualInitialText)
      
              view
          }
      
          fun assertTranslateTextToMorse(text: String, expectedMorse: String) {
              val messageInitialText =
                  "The $ID_ET_MORSE doesn't seem to represent the contents of $ID_ET_TEXT correctly"
              etText.setText(text)
              assertEquals(messageInitialText, expectedMorse, etMorse.text.toString())
          }
      
          fun assertTranslateMorseToText(morse: String, expectedText: String) {
              val messageInitialText =
                  "The $ID_ET_TEXT doesn't seem to represent the contents of $ID_ET_MORSE correctly"
              etMorse.setText(morse)
              assertEquals(messageInitialText, expectedText, etText.text.toString())
          }
      
          fun <A: Activity>navigateToAlphabetActivity(clazz: Class<A>): Pair<MorseAlphabetActivityUnitTest<A>, Intent> {
              val intent = testActivity {
                  btGuide.clickAndRun()
      
                  val nextStartedActivityIntent = shadowActivity.nextStartedActivity
                      ?: throw AssertionError("No intent for starting activity found")
                  val expectedStartedActivityShortClassName = ".AlphabetActivity"
                  val actualStartedActivityShortClassName =
                      nextStartedActivityIntent.component?.shortClassName ?: "null"
                  assertEquals(
                      "The new activity was expected to be AlphabetActivity",
                      expectedStartedActivityShortClassName,
                      actualStartedActivityShortClassName
                  )
      
                  return@testActivity nextStartedActivityIntent
              }
      
              activityController.pause()
              activityController.stop()
              val alphabetActivityUnitTest = MorseAlphabetActivityUnitTest(clazz)
      
              return alphabetActivityUnitTest to intent
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/morsetranslator/Stage1UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.morsetranslator
      
      import org.hyperskill.morsetranslator.internals.MorseMainActivityUnitTest
      import org.hyperskill.morsetranslator.internals.shadows.CustomShadowAsyncDifferConfig
      import org.junit.FixMethodOrder
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.junit.runners.MethodSorters
      import org.robolectric.RobolectricTestRunner
      import org.robolectric.annotation.Config
      
      @RunWith(RobolectricTestRunner::class)
      @FixMethodOrder(MethodSorters.NAME_ASCENDING)
      @Config(shadows = [CustomShadowAsyncDifferConfig::class])
      class Stage1UnitTest : MorseMainActivityUnitTest<MainActivity>(MainActivity::class.java){
      
          @Test
          fun test00_checkTvTextInitialState() {
              testActivity {
                  tvText
              }
          }
      
          @Test
          fun test01_checkTvMorseInitialState() {
              testActivity {
                  tvMorse
              }
          }
      
          @Test
          fun test02_checkEtTextInitialState() {
              testActivity {
                  etText
              }
          }
      
          @Test
          fun test03_checkEtMorseInitialState() {
              testActivity {
                  etMorse
              }
          }
      
          @Test
          fun test04_checkBtClearInitialState() {
              testActivity {
                  btClear
              }
          }
      
          @Test
          fun test05_checkBtGuideInitialState() {
              testActivity {
                  btGuide
              }
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/morsetranslator/Stage2UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.morsetranslator
      
      import org.hyperskill.morsetranslator.internals.MorseMainActivityUnitTest
      import org.hyperskill.morsetranslator.internals.shadows.CustomShadowAsyncDifferConfig
      import org.junit.Assert.assertEquals
      import org.junit.FixMethodOrder
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.junit.runners.MethodSorters
      import org.robolectric.RobolectricTestRunner
      import org.robolectric.annotation.Config
      
      @RunWith(RobolectricTestRunner::class)
      @FixMethodOrder(MethodSorters.NAME_ASCENDING)
      @Config(shadows = [CustomShadowAsyncDifferConfig::class])
      class Stage2UnitTest : MorseMainActivityUnitTest<MainActivity>(MainActivity::class.java){
      
      
          @Test
          fun `test00_Check text translating to morse`() {
              testActivity {
                  assertTranslateTextToMorse(
                      text = "HELLO",
                      expectedMorse = ".... . .-.. .-.. ---"
                  )
              }
          }
      
          @Test
          fun `test01_Check text translating to morse 2`() {
              testActivity {
                  assertTranslateTextToMorse(
                      text = "ANDROID TEST",
                      expectedMorse = ".- -. -.. .-. --- .. -..    - . ... -"
                  )
              }
          }
      
          @Test
          fun `test02_Check morse translating to text`() {
              testActivity {
                  assertTranslateMorseToText(
                      morse = "... --- ...",
                      expectedText = "SOS"
                  )
              }
          }
      
          @Test
          fun `test03_Check morse translating to text 2`() {
              testActivity {
                  assertTranslateMorseToText(
                      morse = ".- -. -.. .-. --- .. -..    - . ... -",
                      expectedText = "ANDROID TEST"
                  )
              }
          }
      
          @Test
          fun `test04_Check clear button`() {
              testActivity {
                  etText.setText("Test")
                  btClear.clickAndRun()
      
                  val messageEtText = "The $ID_BT_CLEAR doesn't seem to clear the contents on $ID_ET_TEXT"
                  assertEquals(messageEtText, "", etText.text.toString())
                  val messageEtMorse = "The $ID_BT_CLEAR doesn't seem to clear the contents on $ID_ET_MORSE"
                  assertEquals(messageEtMorse, "", etMorse.text.toString())
              }
          }
      
          @Test
          fun `test05_Check text translating to morse lowercase`() {
              testActivity {
                  assertTranslateTextToMorse(
                      text = "a lowercase text",
                      expectedMorse = ".-    .-.. --- .-- . .-. -.-. .- ... .    - . -..- -"
                  )
              }
          }
      
          @Test
          fun `test06_Check text translating to morse mixed with unknowns`() {
              testActivity {
                  assertTranslateTextToMorse(
                      text = "This TEXT, has some unknown chars like $ # and !",
                      expectedMorse = "- .... .. ...    - . -..- - ?    .... .- ...    ... --- -- .    ..- -. -.- -. --- .-- -.    -.-. .... .- .-. ...    .-.. .. -.- .    ?    ?    .- -. -..    ?"
                  )
              }
          }
      
          @Test
          fun `test07_Check text translating to text with incorrect chars`() {
              testActivity {
                  assertTranslateMorseToText(
                      morse = "This is not   a morse   text, but it is separated   like morse text",
                      expectedText = "??? ?? ????? ???"
                  )
              }
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/39868#comment
status: Unchecked
record: -1
